// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$arrow-left-name: 'arrow_left';
$arrow-left-x: 72px;
$arrow-left-y: 0px;
$arrow-left-offset-x: -72px;
$arrow-left-offset-y: 0px;
$arrow-left-width: 20px;
$arrow-left-height: 52px;
$arrow-left-total-width: 111px;
$arrow-left-total-height: 84px;
$arrow-left-image: '../images/\sprite.png';
$arrow-left: (72px, 0px, -72px, 0px, 20px, 52px, 111px, 84px, '../images/\sprite.png', 'arrow_left', );
$arrow-right-name: 'arrow_right';
$arrow-right-x: 92px;
$arrow-right-y: 0px;
$arrow-right-offset-x: -92px;
$arrow-right-offset-y: 0px;
$arrow-right-width: 19px;
$arrow-right-height: 52px;
$arrow-right-total-width: 111px;
$arrow-right-total-height: 84px;
$arrow-right-image: '../images/\sprite.png';
$arrow-right: (92px, 0px, -92px, 0px, 19px, 52px, 111px, 84px, '../images/\sprite.png', 'arrow_right', );
$arrow-r-name: 'arrow-r';
$arrow-r-x: 0px;
$arrow-r-y: 72px;
$arrow-r-offset-x: 0px;
$arrow-r-offset-y: -72px;
$arrow-r-width: 39px;
$arrow-r-height: 12px;
$arrow-r-total-width: 111px;
$arrow-r-total-height: 84px;
$arrow-r-image: '../images/\sprite.png';
$arrow-r: (0px, 72px, 0px, -72px, 39px, 12px, 111px, 84px, '../images/\sprite.png', 'arrow-r', );
$dot-act-name: 'dot_act';
$dot-act-x: 92px;
$dot-act-y: 52px;
$dot-act-offset-x: -92px;
$dot-act-offset-y: -52px;
$dot-act-width: 14px;
$dot-act-height: 14px;
$dot-act-total-width: 111px;
$dot-act-total-height: 84px;
$dot-act-image: '../images/\sprite.png';
$dot-act: (92px, 52px, -92px, -52px, 14px, 14px, 111px, 84px, '../images/\sprite.png', 'dot_act', );
$dot-name: 'dot';
$dot-x: 72px;
$dot-y: 52px;
$dot-offset-x: -72px;
$dot-offset-y: -52px;
$dot-width: 14px;
$dot-height: 14px;
$dot-total-width: 111px;
$dot-total-height: 84px;
$dot-image: '../images/\sprite.png';
$dot: (72px, 52px, -72px, -52px, 14px, 14px, 111px, 84px, '../images/\sprite.png', 'dot', );
$soc-fb-name: 'soc_fb';
$soc-fb-x: 0px;
$soc-fb-y: 0px;
$soc-fb-offset-x: 0px;
$soc-fb-offset-y: 0px;
$soc-fb-width: 36px;
$soc-fb-height: 36px;
$soc-fb-total-width: 111px;
$soc-fb-total-height: 84px;
$soc-fb-image: '../images/\sprite.png';
$soc-fb: (0px, 0px, 0px, 0px, 36px, 36px, 111px, 84px, '../images/\sprite.png', 'soc_fb', );
$soc-ok-name: 'soc_ok';
$soc-ok-x: 36px;
$soc-ok-y: 0px;
$soc-ok-offset-x: -36px;
$soc-ok-offset-y: 0px;
$soc-ok-width: 36px;
$soc-ok-height: 36px;
$soc-ok-total-width: 111px;
$soc-ok-total-height: 84px;
$soc-ok-image: '../images/\sprite.png';
$soc-ok: (36px, 0px, -36px, 0px, 36px, 36px, 111px, 84px, '../images/\sprite.png', 'soc_ok', );
$soc-vk-name: 'soc_vk';
$soc-vk-x: 0px;
$soc-vk-y: 36px;
$soc-vk-offset-x: 0px;
$soc-vk-offset-y: -36px;
$soc-vk-width: 36px;
$soc-vk-height: 36px;
$soc-vk-total-width: 111px;
$soc-vk-total-height: 84px;
$soc-vk-image: '../images/\sprite.png';
$soc-vk: (0px, 36px, 0px, -36px, 36px, 36px, 111px, 84px, '../images/\sprite.png', 'soc_vk', );
$spritesheet-width: 111px;
$spritesheet-height: 84px;
$spritesheet-image: '../images/\sprite.png';
$spritesheet-sprites: ($arrow-left, $arrow-right, $arrow-r, $dot-act, $dot, $soc-fb, $soc-ok, $soc-vk, );
$spritesheet: (111px, 84px, '../images/\sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
